import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function migrateAgentsToProfiles() {
  console.log('üöÄ Starting agent migration...');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É AgentProfile (—ç—Ç–æ –±—É–¥–µ—Ç –≤ –Ω–æ–≤–æ–π schema)
    console.log('üìã Step 1: AgentProfile table should already exist');

    // 2. –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Agent –≤ AgentProfile
    console.log('üì¶ Step 2: Migrating data from Agent to AgentProfile...');
    
    const existingAgents = await prisma.agent.findMany({
      include: {
        user: true
      }
    });

    console.log(`Found ${existingAgents.length} agents to migrate`);

    for (const agent of existingAgents) {
      if (!agent.userId) {
        console.log(`‚ö†Ô∏è Skipping agent ${agent.id} - no userId`);
        continue;
      }

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ AgentProfile –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingProfile = await prisma.agentProfile.findUnique({
          where: { userId: agent.userId }
        });

        if (existingProfile) {
          console.log(`‚ö†Ô∏è AgentProfile already exists for user ${agent.userId}`);
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π AgentProfile
        await prisma.agentProfile.create({
          data: {
            userId: agent.userId,
            title: agent.title,
            image: agent.image,
            bio: agent.bio,
            phone: agent.phone,
            rating: agent.rating,
            reviewCount: agent.reviewCount,
            soldProperties: agent.soldProperties,
            yearsExperience: agent.yearsExperience,
            languages: agent.languages,
            specialties: agent.specialties,
            createdAt: agent.createdAt,
            updatedAt: agent.updatedAt,
          }
        });

        console.log(`‚úÖ Migrated agent ${agent.id} -> AgentProfile for user ${agent.userId}`);
      } catch (error) {
        console.error(`‚ùå Error migrating agent ${agent.id}:`, error);
      }
    }

    // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Inquiry
    console.log('üîó Step 3: Updating Inquiry relations...');
    
    const inquiriesWithAgents = await prisma.inquiry.findMany({
      where: {
        agentId: { not: null }
      },
      include: {
        agent: {
          include: {
            user: true
          }
        }
      }
    });

    console.log(`Found ${inquiriesWithAgents.length} inquiries to update`);

    for (const inquiry of inquiriesWithAgents) {
      if (!inquiry.agent?.userId) continue;

      try {
        const agentProfile = await prisma.agentProfile.findUnique({
          where: { userId: inquiry.agent.userId }
        });

        if (agentProfile) {
          await prisma.inquiry.update({
            where: { id: inquiry.id },
            data: {
              agentProfileId: agentProfile.id,
              // agentId –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ–∫–∞ —á—Ç–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            }
          });
          console.log(`‚úÖ Updated inquiry ${inquiry.id} relation`);
        }
      } catch (error) {
        console.error(`‚ùå Error updating inquiry ${inquiry.id}:`, error);
      }
    }

    // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Review
    console.log('‚≠ê Step 4: Updating Review relations...');

    const reviewsWithAgents = await prisma.review.findMany({
      where: {
        agentId: { not: null }
      },
      include: {
        agent: {
          include: {
            user: true
          }
        }
      }
    });

    console.log(`Found ${reviewsWithAgents.length} reviews to update`);

    for (const review of reviewsWithAgents) {
      if (!review.agent?.userId) continue;

      try {
        const agentProfile = await prisma.agentProfile.findUnique({
          where: { userId: review.agent.userId }
        });

        if (agentProfile) {
          await prisma.review.update({
            where: { id: review.id },
            data: {
              agentProfileId: agentProfile.id,
              // agentId –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ–∫–∞ —á—Ç–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            }
          });
          console.log(`‚úÖ Updated review ${review.id} relation`);
        }
      } catch (error) {
        console.error(`‚ùå Error updating review ${review.id}:`, error);
      }
    }

    console.log('‚úÖ Migration completed successfully!');
    console.log('');
    console.log('üîÑ Next steps:');
    console.log('1. Update your application code to use AgentProfile instead of Agent');
    console.log('2. Test thoroughly in development');
    console.log('3. When ready, drop the old Agent table columns');
    console.log('4. Update Prisma schema to remove Agent model');

  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º)
async function rollbackMigration() {
  console.log('üîÑ Rolling back migration...');
  
  try {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ AgentProfile –∑–∞–ø–∏—Å–∏
    await prisma.agentProfile.deleteMany({});
    
    // –û—á–∏—â–∞–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏ –≤ Inquiry –∏ Review
    await prisma.inquiry.updateMany({
      where: { agentProfileId: { not: null } },
      data: { agentProfileId: null }
    });
    
    await prisma.review.updateMany({
      where: { agentProfileId: { not: null } },
      data: { agentProfileId: null }
    });

    console.log('‚úÖ Rollback completed');
  } catch (error) {
    console.error('‚ùå Rollback failed:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  const command = process.argv[2];
  
  if (command === 'rollback') {
    rollbackMigration();
  } else {
    migrateAgentsToProfiles();
  }
}

export { migrateAgentsToProfiles, rollbackMigration };